1. Create the Book class model.
    class Book(models.Model):
    title = models.CharField(max_length=100)
    desc = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        s = '\n'
        s += f"title: {self.title}\n"
        s += f"desc: {self.desc}\n"
        return s
  
2. Create the Author class model.
    class Author(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    books = models.ManyToManyField(Book, related_name="authors")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        s = '\n'
        s += f"fisrt_name: {self.first_name}\n"
        s += f"last_name: {self.last_name}\n"
        return s

3.  Create and run the migration files to create the tables in your database.
    1. python manage.py makemigrations
    2. python manage.py migrate 

4. Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby
    1.Book.objects.create(title="C_Sharp")
    2.Book.objects.create(title="Java")
    3.Book.objects.create(title="Python")
    4.Book.objects.create(title="PHP")
    5.Book.objects.create(title="Ruby")


5. Query: Create 5 different authors: Jane Austen, Emily Dickinson, 
                    Fyodor Dostoevksy, William Shakespeare, Lau Tzu
    1. Author.objects.create(first_name="Jane", last_name="Austen")
    2. Author.objects.create(first_name="Emily", last_name="Dickinson")
    3. Author.objects.create(first_name="Fyodor", last_name="Dostoevksy")
    4. Author.objects.create(first_name="William, last_name="Shakespeare")
    5. Author.objects.create(first_name="Lau", last_name="Tzu")

6. Add a new text field in the authors table called 'notes'.
    1.notes = models.TextField()

7. Create and run the migration files to update the table in your database.
    1. python manage.py makemigrations
    2. python manage.py migrate 
    3. "1" enter
    4. "no value"

8. Query: Change the name of the C Sharp book to C#.
    1.book_to_update = Book.objects.get(id=1)
    2.book_to_update.title = "C#"
    3.book_to_update.save()

9. Query: Change the first name of the 4th author to Bill.
    1.author_update_name = Author.objects.get(id=4)
    2.author_update_name.first_name = "Bill"
    3.author_update_name.save()

10. Query: Assign the first author to the first 2 books.
    1.jane = Author.objects.get(id=1)
    2.book1 = Book.objects.get(id=1)
    3.book2 = Book.objects.get(id=2)
    4.jane.books.add(book1)
    5.jane.books.add(book2)

11. Query: Assign the second author to the first 3 books.
    1.emily = Author.objects.get(id=2)
    2.book1 = Book.objects.get(id=1)
    2.book2 = Book.objects.get(id=2)
    3.book3 = Book.objects.get(id=3)
    4.emily.books.add(book1)
    5.emily.books.add(book2)
    6.emily.books.add(book3)

12. Query: Assign the third author to the first 4 books.
    1.Fyodor = Author.objects.get(id=3)
    2.book4 = Book.objets.get(id=4)
    3.Fyodor.books.add(book4)
    4.emily.books.add(book1)
    5.emily.books.add(book2)
    6.emily.books.add(book3)

13. Query: Assign the fourth author to the first 5 books (or in other words, all the books)
    1.bill = Author.objects.get(id=4)
    2.book5 = Book.objects.get(id=5)
    3.bill.books.add(book1,book2,book3,book4,book5)

14. Query: Retrieve all the authors for the 3rd book
    1.b = Book.objects.get(id=3)
    2.b.authors.all().values()

15. Query: Remove the first author of the 3rd book
    1.book3.authors.remove(jane)
    2.book3.authors.all().values()

16. Query: Add the 5th author as one of the authors of the 2nd book.
    1. lau = Author.objects.get(id=5)
    2. lau.books.add(book2)
    
17. Query: Find all the books that the 3rd author is part of
    1. Fyodor.books.all().values()

18. Query: Find all the authors that contributed to the 5th book
    1. book5.authors.all().values()
    